name: publish

run-name: ${{ (github.event_name == 'workflow_dispatch' && (format('Manual publish{0}', (inputs.dryrun && ' (dry run)') || ''))) || '' }}

env:
  NODE_VERSION: 18.x
  NPM_REGISTRY: 'https://registry.npmjs.org'
  NEON_PLATFORMS_DIR: platforms
  ACTIONS_USER: github-actions
  ACTIONS_EMAIL: github-actions@github.com

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry run (no npm publish)'
        required: false
        type: boolean
        default: true
      releaseType:
        description: 'Release type (or custom to specify)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      action: ${{ steps.action.outputs.type }}
      branch: ${{ steps.branch.outputs.branch }}
      macOS: ${{ steps.matrix.outputs.macOS }}
      Windows: ${{ steps.matrix.outputs.Windows }}
      Linux: ${{ steps.matrix.outputs.Linux }}
    steps:
      - id: action
        name: Determine Action Type
        shell: bash
        run: |
          event_name="${{ github.event_name }}"
          if [[ $event_name = workflow_dispatch ]]
          then
            echo type=dryrun
            echo "type=dryrun" >> "$GITHUB_OUTPUT"
          else
            echo type=publish
            echo "type=publish" >> "$GITHUB_OUTPUT"
          fi
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
          cache: npm
      - name: Compute Default Branch
        id: branch
        shell: bash
        run: |
          branch=$(git remote show origin | grep 'HEAD branch' | awk '{ print $3; }')
          echo $branch
          echo "branch=$branch" >> "$GITHUB_OUTPUT"
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Install cargo-messages
        shell: bash
        run: npm ci
        working-directory: ./pkgs/cargo-messages
      - name: Update Version (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryrun != true }}
        shell: bash
        run: |
          git checkout ${{ steps.branch.outputs.branch }}
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          version='${{ (inputs.releaseType == 'custom' && inputs.custom) || inputs.releaseType }}'
          if [[ "$version" = "custom" ]]; then
            echo -e 'Invalid GitHub workflow inputs: no custom version specified.'
            exit 1
          fi
          # Diagnostics:
          echo "=== BEGIN DIAGNOSTICS ==="
          (cd pkgs && npm run help && npm run which)
          echo "=== END DIAGNOSTICS ==="
          npm version $version -m "v$version"
          if [[ "$(git --porcelain --untracked-files=no)" != "" ]]; then
            git commit -a -m "v$version"
          fi
          git push
      - name: Compute Platform Matrix
        id: matrix
        shell: bash
        run: |
          echo '***** CI metadata for cargo-messages: *****'
          npx @neon-rs/cli ci github
          echo "macOS=$(npx @neon-rs/cli ci github | jq -rc .macOS)" >> "$GITHUB_OUTPUT"
          echo "Windows=$(npx @neon-rs/cli ci github | jq -rc .Windows)" >> "$GITHUB_OUTPUT"
          echo "Linux=$(npx @neon-rs/cli ci github | jq -rc .Linux)" >> "$GITHUB_OUTPUT"
        working-directory: ./pkgs/cargo-messages

  macos-builds:
    name: Builds (macOS)
    needs: [setup]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup.outputs.macOS) }}
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Bump Version (dry-run only)
        if: ${{ needs.setup.outputs.action == 'dryrun' }}
        shell: bash
        run: |
          git checkout ${{ needs.setup.outputs.branch }}
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          git branch -a
          version='${{ (inputs.releaseType == 'custom' && inputs.custom) || inputs.releaseType }}'
          npm version "$version" -m "[dryrun] v$version"
          if [[ "$(git --porcelain --untracked-files=no)" != "" ]]; then
            git commit -a -m "[dryrun] v$version"
          fi
          git branch -a
          git status
      - name: Build
        uses: neon-actions/build@v0.9
        with:
          working-directory: ./pkgs/cargo-messages
          node-version: ${{ env.NODE_VERSION }}
          platform: ${{ matrix.platform }}
          github-release: ${{ needs.setup.outputs.action == 'publish' }}

  windows-builds:
    name: Builds (Windows)
    needs: [setup]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup.outputs.Windows) }}
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Bump Version (dry-run only)
        if: ${{ needs.setup.outputs.action == 'dryrun' }}
        shell: bash
        run: |
          git checkout ${{ needs.setup.outputs.branch }}
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          git branch -a
          version='${{ (inputs.releaseType == 'custom' && inputs.custom) || inputs.releaseType }}'
          npm version "$version" -m "[dryrun] v$version"
          if [[ "$(git --porcelain --untracked-files=no)" != "" ]]; then
            git commit -a -m "[dryrun] v$version"
          fi
          git branch -a
          git status
      - name: Build
        uses: neon-actions/build@v0.9
        with:
          working-directory: ./pkgs/cargo-messages
          platform: ${{ matrix.platform }}
          node-version: ${{ env.NODE_VERSION }}
          github-release: ${{ needs.setup.outputs.action == 'publish' }}

  other-builds:
    name: Builds (other platforms)
    needs: [setup]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup.outputs.Linux) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Bump Version (dry-run only)
        if: ${{ needs.setup.outputs.action == 'dryrun' }}
        shell: bash
        run: |
          git checkout ${{ needs.setup.outputs.branch }}
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          git branch -a
          version='${{ (inputs.releaseType == 'custom' && inputs.custom) || inputs.releaseType }}'
          npm version "$version" -m "[dryrun] v$version"
          if [[ "$(git --porcelain --untracked-files=no)" != "" ]]; then
            git commit -a -m "[dryrun] v$version"
          fi
          git branch -a
          git status
      - name: Build
        uses: neon-actions/build@v0.9
        with:
          working-directory: ./pkgs/cargo-messages
          node-version: ${{ env.NODE_VERSION }}
          use-cross: true
          platform: ${{ matrix.platform }}
          github-release: ${{ needs.setup.outputs.action == 'publish' }}

  publish:
    name: Publish
    needs: [setup, macos-builds, windows-builds, other-builds]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Publish (cargo-messages)
        if: ${{ needs.setup.outputs.action == 'publish' }}
        uses: neon-actions/publish@v0.4.1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          working-directory: ./pkgs/cargo-messages
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
          fetch-binaries: "*.tgz"
          github-release: true
      - name: Build (@neon-rs/load)
        shell: bash
        run: npm run build
        working-directory: ./pkgs/load
      - name: Publish (@neon-rs/load)
        if: ${{ needs.setup.outputs.action == 'publish' }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./pkgs/load
      - name: Update (@neon-rs/cli)
        if: ${{ needs.setup.outputs.action == 'publish' }}
        shell: bash
        run: |
          git checkout ${{ needs.setup.outputs.branch }}
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          npm run update-src
          git commit -a -m 'update cli to cargo-messages@latest'
          git push
      - name: Publish (@neon-rs/cli)
        if: ${{ needs.setup.outputs.action == 'publish' }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./pkgs/cli
