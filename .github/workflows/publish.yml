name: Publish

run-name: |
  ${{
    (github.event_name == 'workflow_dispatch' && inputs.dryrun && 'Dry run') ||
    (github.event_name == 'workflow_dispatch' &&
      format('Trigger publish: {0}',
        (inputs.bumpType == 'custom' && inputs.custom) || inputs.bumpType)
      ) ||
    format('Publish: {0}', github.event.head_commit.message)
  }}

env:
  NODE_VERSION: 18.x
  NEON_PLATFORMS_DIR: platforms
  ACTIONS_USER: github-actions
  ACTIONS_EMAIL: github-actions@github.com

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry run (no npm publish)'
        required: false
        type: boolean
        default: true
      bumpType:
        description: 'Version bump type (or custom to specify)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      action: ${{ steps.action.outputs.type }}
    steps:
      - name: Validate Workflow Inputs
        if: ${{ inputs.bumpType == 'custom' && inputs.custom == '' }}
        shell: bash
        run: |
          echo '::error::No custom version number provided'
          exit 1
      # - id: dryrun
      #   name: Dry-Run Event?
      #   if: |
      #     ${{
      #       (github.event_name == 'workflow_dispatch' && inputs.dryrun == 'true') ||
      #       (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/dryrun'))
      #     }}
      #   shell: bash
      #   run: echo "dryrun=true" >> "$GITHUB_OUTPUT"
      # - id: tag
      #   name: Tag and Release Event?
      #   if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryrun != 'true' }}
      #   shell: bash
      #   run: echo "tag=true" >> "$GITHUB_OUTPUT"
      - id: action
        name: Determine Action Type
        shell: bash
        run: |
          case "${{ github.event_name }},${{ inputs.dryrun }}" in
            workflow_dispatch,true) type=dryrun ;;
            workflow_dispatch,*) type=tag ;;
            *) type=publish ;;
          esac
          echo "type=$type"
          echo "type=$type" >> "$GITHUB_OUTPUT"
      - name: Validate Secrets
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          TAG_TOKEN: ${{ secrets.TAG_TOKEN }}
        shell: bash
        run: |
          action=${{ steps.action.outputs.type }}
          if [[ $action = publish ]] && [[ -z $NPM_TOKEN ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for this GitHub repo."
            echo "::error::To publish to npm, this action requires:"
            echo "::error:: • an npm access token;"
            echo "::error:: • with Read-Write access to this project's npm packages;"
            echo "::error:: • stored as a repo secret named NPM_TOKEN."
            echo "::error::See https://docs.npmjs.com/about-access-tokens for info about creating npm tokens."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
          if [[ $action = tag ]] && [[ -z $TAG_TOKEN ]]; then
            echo "::error::Secret TAG_TOKEN is not defined for this GitHub repo."
            echo "::error::To push a publish tag, this action requires:"
            echo "::error:: • a GitHub Personal Access Token;"
            echo "::error:: • with Read-Write access to this repo;"
            echo "::error:: • stored as a repo secret named TAG_TOKEN."
            echo "::error::See https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens for info about creating GitHub Personal Access Tokens."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TAG_TOKEN || github.token }}
      - name: Remote Publish (manual only)
        if: ${{ steps.action.outputs.type == 'tag' }}
        shell: bash
        run: |
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          npm run remote-publish -- '${{ (inputs.bumpType == 'custom' && inputs.custom) || inputs.bumpType }}'

  build:
    name: Build
    if: ${{ needs.setup.outputs.action != 'tag' }}
    needs: [setup]
    permissions:
      contents: write
    uses: ./.github/workflows/build.yml
    with:
      branch: ${{ github.event.repository.default_branch }}
      version: ${{ github.event_name == 'workflow_dispatch' && ((inputs.bumpType == 'custom' && inputs.custom) || inputs.bumpType) }}
      github-release: ${{ needs.setup.outputs.action == 'publish' }}

  publish:
    name: Publish
    if: ${{ needs.setup.outputs.action == 'publish' }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Diagnostics
        shell: bash
        run: git log -10
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Publish (cargo-messages)
        uses: neon-actions/publish@v0.4.1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          working-directory: ./pkgs/cargo-messages
          node-version: ${{ env.NODE_VERSION }}
          fetch-binaries: "*.tgz"
          github-release: true
      - name: Build (@neon-rs/load)
        shell: bash
        run: npm run build
        working-directory: ./pkgs/load
      - name: Publish (@neon-rs/load)
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./pkgs/load
      - name: Update (@neon-rs/cli)
        shell: bash
        run: |
          git config --global user.name ${{ env.ACTIONS_USER }}
          git config --global user.email ${{ env.ACTIONS_EMAIL }}
          npm run dist
          git commit -a -m 'fresh cli build'
          git push
      - name: Publish (@neon-rs/cli)
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./dist/cli
