name: Publish

run-name: |
  ${{ (github.event_name == 'workflow_dispatch' && inputs.dryrun
       && 'Dry run')
   || (github.event_name == 'workflow_dispatch'
       && format('Tag release: {0}', (inputs.version == 'custom' && inputs.custom) || inputs.version))
   || format('Publish: {0}', github.event.head_commit.message) }}

on:
  # Event: A maintainer has pushed a new release tag for publication.
  push:
    tags:
      - v*

  # Event: A maintainer has used the GitHub Actions UI to initiate
  #        either tagging a new release for publication or doing a
  #        dry run.
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry run (no npm publish)'
        required: false
        type: boolean
        default: true
      version:
        description: 'Version component to update (or "custom" to provide exact version)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      tag: ${{ steps.tag.outputs.tag }}
      publish: ${{ steps.publish.outputs.publish }}
    steps:
      - name: Validate Workflow Inputs
        if: ${{ inputs.version == 'custom' && inputs.custom == '' }}
        shell: bash
        run: |
          echo '::error::No custom version number provided'
          exit 1
      - id: dryrun
        name: Validate Dry Run Event
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.dryrun }}
        shell: bash
        run: echo dryrun=true >> "$GITHUB_OUTPUT"
      - id: tag
        name: Validate Tag Event
        if: ${{ github.event_name == 'workflow_dispatch' && !inputs.dryrun }}
        shell: bash
        env:
          TAG_TOKEN: ${{ secrets.TAG_TOKEN }}
        run: |
          if [[ -z $TAG_TOKEN ]]; then
            echo "::error::Secret TAG_TOKEN is not defined for this GitHub repo."
            echo "::error::To push a publish tag, this action requires:"
            echo "::error:: • a GitHub Personal Access Token;"
            echo "::error:: • with Read-Write access to this repo;"
            echo "::error:: • stored as a repo secret named TAG_TOKEN."
            echo "::error::See https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens for info about creating GitHub Personal Access Tokens."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
          echo tag=true >> "$GITHUB_OUTPUT"
      - id: publish
        name: Validate Publish Event
        if: ${{ github.event_name == 'push' }}
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ -z $NPM_TOKEN ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for this GitHub repo."
            echo "::error::To publish to npm, this action requires:"
            echo "::error:: • an npm access token;"
            echo "::error:: • with Read-Write access to this project's npm packages;"
            echo "::error:: • stored as a repo secret named NPM_TOKEN."
            echo "::error::See https://docs.npmjs.com/about-access-tokens for info about creating npm tokens."
            echo "::error::See https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions for info about how to store GitHub repo secrets."
            exit 1
          fi
          echo publish=true >> "$GITHUB_OUTPUT"
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TAG_TOKEN || github.token }}
      - name: Set Environment Variables
        uses: falti/dotenv-action@v1
        with:
          path: ./.github/workflows/.env
          export-variables: true
          keys-case: bypass
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Tag Release (manual only)
        if: ${{ steps.tag.outputs.tag }}
        shell: bash
        run: |
          git config --global user.name $ACTIONS_USER
          git config --global user.email $ACTIONS_EMAIL
          npm ci
          npm run tag -- '${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}'

  diagnostics:
    name: Diagnostics
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Diagnostics
        shell: bash
        run: |
          echo dryrun: '${{ needs.setup.outputs.dryrun }}'
          echo tag: '${{ needs.setup.outputs.tag }}'
          echo publish: '${{ needs.setup.outputs.publish }}'
      - name: Dry run
        if: ${{ needs.setup.outputs.dryrun }}
        shell: bash
        run: echo dry run
      - name: Not dry run
        if: ${{ !needs.setup.outputs.dryrun }}
        shell: bash
        run: echo not dry run
      - name: Tag
        if: ${{ needs.setup.outputs.tag }}
        shell: bash
        run: echo tag
      - name: Not tag
        if: ${{ !needs.setup.outputs.tag }}
        shell: bash
        run: echo not tag
      - name: Publish
        if: ${{ needs.setup.outputs.publish }}
        shell: bash
        run: echo publish
      - name: Not publish
        if: ${{ !needs.setup.outputs.publish }}
        shell: bash
        run: echo not publish
      - name: Inputs
        shell: bash
        run: |
          echo '${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}'
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Environment Variables
        uses: falti/dotenv-action@v1
        with:
          path: ./.github/workflows/.env
          export-variables: true
          keys-case: bypass
      - name: Show Env Variables
        shell: bash
        run: |
          echo "$NODE_VERSION"
          echo '${{ env.NODE_VERSION }}'

  build:
    name: Build
    if: ${{ !needs.setup.outputs.tag }}
    needs: [setup]
    permissions:
      contents: write
    uses: ./.github/workflows/build.yml
    with:
      branch: ${{ github.event.repository.default_branch }}
      version: ${{ (inputs.version == 'custom' && inputs.custom) || inputs.version }}
      github-release: ${{ !!needs.setup.outputs.publish }}

  publish:
    name: Publish
    if: ${{ needs.setup.outputs.publish }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Environment Variables
        uses: falti/dotenv-action@v1
        with:
          path: ./.github/workflows/.env
          export-variables: true
          keys-case: bypass
      - name: Diagnostics
        shell: bash
        run: git log -10
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Publish (cargo-messages)
        uses: neon-actions/publish@v0.4.1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          working-directory: ./pkgs/cargo-messages
          node-version: ${{ env.NODE_VERSION }}
          fetch-binaries: "*.tgz"
          github-release: true
      - name: Build (@neon-rs/load)
        shell: bash
        run: npm run build
        working-directory: ./pkgs/load
      - name: Publish (@neon-rs/load)
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./pkgs/load
      - name: Update (@neon-rs/cli)
        shell: bash
        run: |
          git config --global user.name $ACTIONS_USER
          git config --global user.email $ACTIONS_EMAIL
          npm run dist
          git commit -a -m 'fresh cli build'
          git push
      - name: Publish (@neon-rs/cli)
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
        working-directory: ./dist/cli
