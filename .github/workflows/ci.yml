name: CI

env:
  NODE_VERSION: 18.x
  PROXY: http://localhost:4873/
  CIUSER: ci
  CIEMAIL: ci@neon-bindings.com
  CIPASS: dummycipassword

on:
  push:
    # Prevent duplicate runs of this workflow on our own internal PRs.
    branches:
      - main
      - next/*
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
      - next/*

jobs:
  bundles:
    name: Check Bundles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check Bundles
        shell: bash
        run: |
          echo "Checking that all bundled tools are up to date..."
          dirty_workspaces=()
          for input_workspace in `find src -type d -mindepth 1 -maxdepth 1 -not -name node_modules` ; do
            output_workspace=$(echo $input_workspace | sed -e 's/^src/pkgs/')
            input_mtime=$(git log -1 --format=%ct $input_workspace)
            output_mtime=$(git log -1 --format=%ct $output_workspace)
            if [[ $input_mtime -gt $output_mtime ]] ; then
              echo "‚ùå $input_workspace has changed since $output_workspace was last generated"
              dirty_workspaces+=($input_workspace)
            fi
          done
          if [[ ${#dirty_workspaces[@]} -gt 0 ]] ; then
            echo
            echo 'üí° Re-run `npm run bundle` on the following workspaces before committing:'
            for workspace in ${dirty_workspaces[*]} ; do
              echo "  ‚Ä¢ $workspace"
            done
            exit 1
          fi

  integration:
    name: Integration Tests
    needs: [bundles]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        shell: bash
        run: npm ci
      - name: Bump Version (dry-run only)
        shell: bash
        run: |
          git checkout main
          git config --global user.email '${{ env.CIEMAIL }}'
          git config --global user.name 'Neon CI'
          git branch -a
          npm version patch -m 'dryrun'
          git branch -a
          git status
      - name: Build
        uses: neon-actions/build@v0.3.4
        with:
          working-directory: ./pkgs/cargo-messages
          target: linux-x64-gnu
          node-version: ${{ env.NODE_VERSION }}
          use-cross: false
          npm-publish: false
          github-release: false
      - name: Diagnostics
        shell: bash
        run: |
          cd ./pkgs/cargo-messages
          ls -alF
      # - name: Start npm Proxy
      #   shell: bash
      #   run: ./proxy.sh
      #   working-directory: ./test/integration/proxy
      # - name: Publish @cargo-messages/linux-x64-gnu to proxy
      #   shell: bash
      #   working-directory: ./pkgs/cargo-messages/npm/linux-x64-gnu
      #   run: |
      #     npx npm-cli-adduser -u ${{env.CIUSER}} -p ${{env.CIPASS}} -e ${{env.CIEMAIL}} -r ${{env.PROXY}}
      #     npm publish --registry ${{env.PROXY}}
      # - name: Publish cargo-messages to proxy
      #   shell: bash
      #   working-directory: ./pkgs/cargo-messages
      #   run: |
      #     npx npm-cli-adduser -u ${{env.CIUSER}} -p ${{env.CIPASS}} -e ${{env.CIEMAIL}} -r ${{env.PROXY}}
      #     npm publish --registry ${{env.PROXY}}
      # - name: Publish @neon-rs/load to proxy
      #   shell: bash
      #   working-directory: ./pkgs/load
      #   run: |
      #     npx npm-cli-adduser -u ${{env.CIUSER}} -p ${{env.CIPASS}} -e ${{env.CIEMAIL}} -r ${{env.PROXY}}
      #     npm publish --registry ${{env.PROXY}}
      # - name: Publish @neon-rs/cli to proxy
      #   shell: bash
      #   working-directory: ./pkgs/cli
      #   run: |
      #     npx npm-cli-adduser -u ${{env.CIUSER}} -p ${{env.CIPASS}} -e ${{env.CIEMAIL}} -r ${{env.PROXY}}
      #     npm publish --registry ${{env.PROXY}}
      