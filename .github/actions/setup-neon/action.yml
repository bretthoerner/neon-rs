name: 'Setup Neon'
description: 'Setup the Neon toolchain.'
inputs:
  platform:
    description: 'Platform being built for.'
    required: false
    default: ''
  use-cross:
    description: 'Install cross-rs?'
    required: false
    default: 'false'
  workspace:
    description: 'Path to workspace being setup.'
    required: false
    default: '.'
outputs:
  rust:
    description: 'Rust version installed.'
    value: ${{ steps.version.outputs.rust }}
  node:
    description: 'Node version installed.'
    value: ${{ steps.version.outputs.node }}
  target:
    description: 'Rust target architecture installed.'
    value: ${{ steps.target.outputs.target }}
runs:
  using: "composite"
  steps:
    - name: Set Environment Variables
      uses: falti/dotenv-action@v1
      with:
        path: ./.github/workflows/.env
        export-variables: true
        keys-case: bypass
    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: ${{ env.NPM_REGISTRY }}
        cache: npm
    - name: Compute CLI path
      id: cli
      shell: bash
      run: echo path=$( (cd dist/cli && pwd) ) >> $GITHUB_OUTPUT
    - name: Compute Rust Target
      id: target
      shell: bash
      run: echo target=$(node ${{ steps.cli.outputs.path }} list-platforms | jq -r '.["${{ inputs.platform }}"]') >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.workspace }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        target: ${{ steps.target.outputs.target }}
        override: true
    - name: Install cross-rs
      if: ${{ inputs['use-cross'] == 'true' }}
      uses: baptiste0928/cargo-install@v2
      with:
        crate: cross
    - name: Output Versions
      id: version
      shell: bash
      run: |
        # v18.19.0 ==> 18.19.0
        echo node=$(node --version | cut -c 2-)
        # rustc 1.70.0 (90c541806 2023-05-31) ==> 1.70.0
        echo rust=$(rustc --version | awk '{ print $2; }')
